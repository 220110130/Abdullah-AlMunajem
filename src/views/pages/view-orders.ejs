<!DOCTYPE html>
<html>

<head>
  <title>Orders</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    .table-hover tbody tr:hover {
      background-color: #f5f5f5;
    }
  </style>
</head>

<body>
  <div id="mainDiv" class="container mt-4">
    <h1 class="mb-4">Orders</h1>
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th>Order ID</th>
          <th>Products</th>
          <th>Total Amount</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody id="ordersTableBody"></tbody>
    </table>
  </div>

  <script>
    fetchOrders();

    function fetchOrders() {
      fetch(`/api/orders`)
        .then(response => response.json())
        .then(apiResponse => {
          const orders = apiResponse.orders;
          const role = apiResponse.role;
          const ordersTableBody = document.getElementById('ordersTableBody');
          ordersTableBody.innerHTML = '';

          if (orders.length === 0) {
            ordersTableBody.innerHTML = '<tr><td colspan="5">No Order placed yet</td></tr>';
            return;
          }

          orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${order.orderNumber}</td>
              <td>
                ${order.products.map(product => `<div>${product.productId.name} (Quantity: ${product.quantity})</div>`).join('')}
              </td>
              <td>$${order.totalPrice}</td>
              <td>${order.status}</td>
              <td>
                ${(role === 'vendor' && order.status === 'pending') ? `
                <button class="btn" style="background-color: #FFA500;  border-color: #FFA500; color:#fff ;" onclick="updateOrderStatus('${order._id}', 'delivered')">Mark as Delivered</button>
                <button class="btn" style="background-color: #FFA500;  border-color: #FFA500; color:#fff ;" onclick="updateOrderStatus('${order._id}', 'cancelled')">Mark as Cancelled</button>
                ` : ((role === 'admin' && order.status === 'pending') ? `
                <button class="btn" style="background-color: #FFA500;  border-color: #FFA500; color:#fff ;" onclick="updateOrderStatus('${order._id}', 'cancelled')">Mark as Cancelled</button>
                ` : ((role === 'customer' && order.status === 'pending') ? `
                <button class="btn" style="background-color: #FFA500;  border-color: #FFA500; color:#fff ;" onclick="updateOrderStatus('${order._id}', 'cancelled')">Cancel Order</button>
                ` : '-'))}
              </td>

            `;
            ordersTableBody.appendChild(row);
          });
        })
        .catch(error => console.error(error));
    }

    function updateOrderStatus(orderId, status) {
      fetch(`/api/orders/${orderId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status
          }),
        })
        .then(response => response.json())
        .then(data => {
          fetchOrders();
        })
        .catch(error => console.error(error));
    }
  </script>
</body>

</html>